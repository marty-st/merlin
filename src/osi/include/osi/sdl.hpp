#ifndef SDL_INCLUDE
#define SDL_INCLUDE

#include <SDL2/SDL.h>

#include <cstdint>
#include <string>

namespace osi
{

struct SDLConfig
{
    // Initial window width in pixels
    int window_width = 400;
    // Initial window height in pixels
    int window_height = 300;

    std::string window_title = "Merlin Engine";

    bool fullscreen = false;
    // bool maximized = false;
    bool resizable = true;
};

// Pointer to the main SDL window
static SDL_Window* window_ptr = nullptr;
// Pointer to the OpenGL context
static SDL_GLContext gl_context_ptr = nullptr;

static SDLConfig cfg;

/**
 * Prints an error message generated by the combinations of `SDL_LogError()` & `SDL_GetError()` functions.
 * @param message Custom preamble to the error received from SDL
 */
void SDL_error(const char* message);

/**
 * Initializes SDL related subsystem, e.g. video, audio.
 * @param option SDL defined constant for a given subsytem, e.g. `SDL_INIT_VIDEO`
 * @return Returns `true` on success, `false` otherwise
 * @exception Throws an exception when SDL fails to initialize.
 */
bool init_SDL(uint8_t option);

/**
 * Sets-up options for the OpenGL window context, maintained by SDL, 
 * e.g. OpenGL version, MSAA, color channel size...
 */
void setup_SDL_GL_attributes();

/**
 * Initializes the main SDL window with given dimensions and predefined properties flags.
 * @param cfg Configuration structure containing properties of the initialized window
 * @exception Throws an exception when window fails to initialize.
 */
void setup_SDL_window(SDLConfig &cfg);

/**
 * Creates an OpenGL context embedded into the SDL window.
 * @exception Throws an exception when context fails to initialize.
 */
void setup_SDL_GL_context();

/**
 * Calls all the setup and initializing SDL functions.
 * @param cfg Configuration structure containing properties of the initialized window
 */
void SDL_start(SDLConfig &cfg);

/**
 * Runs the SDL related events of the application loop - input events and window render swap
 * @param running Reference to a boolean controlling the application loop
 */
void SDL_run(bool &running);

/**
 * Frees resources controlled by SDL, including the OpenGL context.
 * 
 * Called either when an exception is thrown and reaches the `osi::run()` function, 
 * or when the application loop is terminated in the `osi::run()` function.
 */
void SDL_finish();

} // namespace osi

#endif