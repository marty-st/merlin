#ifndef SDL_INCLUDE
#define SDL_INCLUDE

#include <SDL2/SDL.h>

#include <osi/keyboard.hpp>
#include <osi/mouse.hpp>
#include <osi/window.hpp>

#include <cstdint>
#include <string>

namespace osi
{

/**
 * Holds initial settings for SDL related objects.
 */
struct SDLConfig
{
    // NOTE: Could add: min and max time_delta (min for max fps cap, max for smaller lag spike updates)
    //                  warmup iterations to the run loop

    // Initial window width in pixels
    int window_width = 400;
    // Initial window height in pixels
    int window_height = 300;

    std::string window_title = "Merlin Engine";

    bool fullscreen = false;
    // bool maximized = false;
    bool resizable = true;
};

// Pointer to the main SDL window
static SDL_Window* window_ptr = nullptr;
// Pointer to the OpenGL context
static SDL_GLContext gl_context_ptr = nullptr;
// Initial SDL configuration
static SDLConfig cfg;
// Reflects SDL window state changes
static Window window(cfg.window_width, cfg.window_height);
// Holds and encapsulates processed key events
static Keyboard keyboard;
// Holds and encapsulates processed motion and button events
static Mouse mouse;

/**
 * Prints an error message generated by the combinations of `SDL_LogError()` & `SDL_GetError()` functions.
 * @param message Custom preamble to the error received from SDL
 */
void SDL_error(const char* message);

/**
 * Initializes SDL related subsystem, e.g. video, audio.
 * @param option SDL defined constant for a given subsytem, e.g. `SDL_INIT_VIDEO`
 * @return Returns `true` on success, `false` otherwise
 * @exception Throws an exception when SDL fails to initialize.
 */
bool init_SDL(uint8_t option);

/**
 * Sets-up options for the OpenGL window context, maintained by SDL, 
 * e.g. OpenGL version, MSAA, color channel size...
 */
void setup_SDL_GL_attributes();

/**
 * Initializes the main SDL window with given dimensions and predefined properties flags.
 * @param cfg Configuration structure containing properties of the initialized window
 * @exception Throws an exception when window fails to initialize.
 */
void setup_SDL_window(SDLConfig &cfg);

/**
 * Creates an OpenGL context embedded into the SDL window.
 * @exception Throws an exception when context fails to initialize.
 */
void setup_SDL_GL_context();

/**
 * Calls `ImGui_ImplSDL2_InitForOpenGL(window_ptr, gl_context_ptr)` from within the sdl.hpp context.
 * This encapsulation exists, so the code can be split into separate files (ImGui related)
 * instead of residing in the run.cpp file.
 */
void SDL_init_ImGui();

/**
 * Calls all the setup and initializing SDL functions.
 * @param cfg Configuration structure containing properties of the initialized window
 */
void SDL_start(SDLConfig &cfg);

/**
 * Processes a window event detected by SDL. This event is then reflected by modifying
 * the `osi::Window` class.
 * @param window_event Event generated from `SDL_PollEvent(&event)`
 */
void SDL_window_event(const SDL_WindowEvent &window_event);

/**
 * Processes a keyboard event detected by SDL. This event is then reflected by modifying
 * the `osi::Keyboard` class.
 * @param keyboard_event Event generated from `SDL_PollEvent(&event)`
 */
void SDL_keyboard_event(const SDL_KeyboardEvent & keyboard_event);

/**
 * Processes a text input event detected by SDL. This event is then reflected by modifying
 * the `osi::Keyboard` class.
 * @param text_event Event generated from `SDL_PollEvent(&event)`
 */
void SDL_text_input_event(const SDL_TextInputEvent &text_event);

/**
 * Processes a text input event detected by SDL. This event is then reflected by modifying
 * the `osi::Mouse` class.
 * @param event Event generated from `SDL_PollEvent(&event)`
 */
void SDL_mouse_event(const SDL_Event &event);

/**
 * Calls `SDL_GL_SwapWindow()` to double-buffer the OpenGL context. 
 * This encapsulation exists, so we don't have to include SDL in the run.hpp file.
 */
void SDL_swap_buffer();

/**
 * Runs the SDL related events of the application loop - input events and window render swap
 * @param running Reference to a boolean controlling the application loop
 */
void SDL_run(bool &running);

/**
 * Frees resources controlled by SDL, including the OpenGL context.
 * 
 * Called either when an exception is thrown and reaches the `osi::run()` function, 
 * or when the application loop is terminated in the `osi::run()` function.
 */
void SDL_finish();

} // namespace osi

#endif // SDL_INCLUDE
