#ifndef VAO_INCLUDE
#define VAO_INCLUDE

#include <graphics/ebo.hpp>
#include <graphics/vbo.hpp>
#include <osi/opengl.hpp>

#include <memory>

using EBO_ptr = std::unique_ptr<EBO>;
using VBO_ptr = std::unique_ptr<VBO>;

/**
 * Wrapper for a Vertex Array Object.
 */
class VAO
{
    // ID recognized by OpenGL
    GLuint ID;
    // Sizes of the buffers
    std::size_t vertices_size;
    std::size_t normals_size;
    std::size_t indices_size;
    std::size_t texture_coordinates_size;

    // Unique pointers to the VBOs and EBO
    VBO_ptr _VBO_vertex = nullptr;
    VBO_ptr _VBO_normal = nullptr;
    VBO_ptr _VBO_tex_coord = nullptr;
    EBO_ptr _EBO = nullptr;

    // NOTE: Consider adding a VBO for tangents and bitangents 

public:
    /**
     * Creates a new VAO, ID is generated by OpenGL.
     */
    VAO();

    /**
     * Calls `deleteArray()`.
     */
    ~VAO();

    /**
     * Binds the VAO to be used for rendering.
     */
    void bind() const;

    /**
     * Unbinds the VAO.
     */
    void unbind() const;

    /**
     * Deletes the VAO if ID is not 0.
     */
    void deleteArray();

    /**
     * Links a VBO to the VAO.
     * @param vbo_id ID of the VBO
     * @param layout_loc Location in the layout of the input data in the shader
     * @param element_size Number of elements for each vertex (stride element count)
     */
    void linkVBO(GLuint vbo_id, unsigned int layout_loc, GLint element_size);

    /**
     * Sends vertex data to the VBO and links it to the VAO with predefined layout location.
     * The vertex data is expected to be in the format of 3 floats per vertex.
     * Vertices are not stored on the CPU side.
     * @param vertices Vector of vertex data
     */
    void bindVertices(std::vector<float> const &_vertices);

    /**
     * Sends normal data to the VBO and links it to the VAO with predefined layout location.
     * The normal data is expected to be in the format of 3 floats per normal.
     * Normals are not stored on the CPU side. Only the size of the data is kept.
     * @param normals Vector of normal data
     */
    void bindNormals(std::vector<float> const &_normals);

    /**
     * Sends index data to the EBO and links it to the VAO.
     * Indices are not stored on the CPU side. Only the size of the data is kept.
     * @param _indices Vector of index data
     */
    void bindIndices(std::vector<unsigned int> const &_indices);

    /**
     * Sends texture coordinate data to the VBO and links it to the VAO with predefined layout location.
     * The texture coordinate data is expected to be in the format of 2 floats per texture coordinate.
     * Texture coordinates are not stored on the CPU side. Only the size of the data is kept.
     * @param texture_coordinates Vector of texture coordinate data
     */
    void bindTextureCoordinates(std::vector<float> const &texture_coordinates);

    /**
     * Binds all buffers (VBOs, EBO) to the VAO.
     * @param vertices Vector of vertex data
     * @param normals Vector of normal data
     * @param indices Vector of index data
     * @param texture_coordinates Vector of texture coordinate data
     */
    void bindBuffers(std::vector<float> const &vertices, 
                     std::vector<float> const &normals,
                     std::vector<unsigned int> const &indices = {},
                     std::vector<float> const &texture_coordinates = {});

    /**
     * @return Size of vertex data array received in `bindBuffers()`.
     */
    const std::size_t getVerticesSize() const { return vertices_size; }

    /**
     * @return Size of normal data array received in `bindBuffers()`.
     */
    const std::size_t getNormalsSize() const { return normals_size; }

    /**
     * @return Size of index data array received in `bindBuffers()`.
     */
    const std::size_t getIndicesSize() const { return indices_size; }

    /**
     * @return Size of texture coordinate data array received in `bindBuffers()`.
     */
    const std::size_t getTextureCoordinatesSize() const { return texture_coordinates_size; }
};

#endif // VAO_INCLUDE
