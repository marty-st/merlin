#ifndef TEXTURE_INCLUDE
#define TEXTURE_INCLUDE

#include <osi/opengl.hpp>

#include <array>
#include <filesystem>
#include <memory>

class Texture;

using texture_ptr = std::shared_ptr<Texture>;

enum class TextureType
{
    T2D,
    CUBE
};

// enum class TextureFormat
// {
//     RED,
//     RGB8,
//     RGBA
    // RGB16F,
    // RGBA16F,
    // RGB32F,
    // RGBA32F
// };

// enum class TextureWrap
// {
//     REPEAT,
//     MIRRORED_REPEAT,
//     CLAMP_TO_EDGE,
//     CLAMP_TO_BORDER
// };

// enum class TextureFilter
// {
//     NEAREST,
//     LINEAR,
//     NEAREST_MIPMAP_NEAREST,
//     LINEAR_MIPMAP_NEAREST,
//     NEAREST_MIPMAP_LINEAR,
//     LINEAR_MIPMAP_LINEAR
// };

/**
 * Wrapper for a texture object. Manages the ID recognized by OpenGL.
 */
class Texture
{
    // ID recognized by OpenGL
    GLuint ID;

    // Type of the texture
    TextureType type;

    /**
     * Creates a new texture object with the given ID. Used by the static load* methods.
     * @param _ID ID generated by OpenGL
     */
    Texture(GLuint _ID, TextureType _type);
public:
    /**
     * Deletes the texture object.
     */
    ~Texture();

    /**
     * @return ID recognized by OpenGL
     */
    const GLuint getID() const;

    /**
     * @return Type of the texture
     */
    const TextureType getType() const;

    /**
     * Loads a 2D texture from the given file.
     * @param texture_file Path to the texture file
     * @return Shared pointer to the texture object
     */
    static texture_ptr createTexture2D(const std::filesystem::path texture_file);

    /**
     * Loads a cube texture from the given files.
     * The order is: +X, -X, +Y, -Y, +Z, -Z (right, left, top, bottom, front, back).
     * @param cube_texture_files Array of the 6 paths to the cube texture files. 
     * @return Shared pointer to the texture object
     */
    static texture_ptr createTextureCube(const std::array<std::filesystem::path, 6> &cube_texture_files);
};

#endif // TEXTURE_INCLUDE
