#ifndef OPENGL_BUFFER_OBJECT_INCLUDE
#define OPENGL_BUFFER_OBJECT_INCLUDE

#include <osi/opengl.hpp>
#include <util/assumption.hpp>

#include <vector>

class OpenGLBufferObject
{
public:
    // Buffer ID recognized by OpenGL
    GLuint ID;

    /**
     * Creates a new buffer object, ID is generated by OpenGL.
     */
    OpenGLBufferObject();

    /**
     * Calls `deleteBuffer()`.
     */
    virtual ~OpenGLBufferObject();

    /**
     * Deletes the buffer object if ID is not 0.
     */
    void deleteBuffer();

    /**
     * Sends a vector of data to the OpenGL buffer object.
     */
    template <typename T>
    void sendData(const std::vector<T> &data)
    {
        ASSUME(ID != 0);
        glNamedBufferStorage(ID, sizeof(T) * data.size(), data.data(), GL_DYNAMIC_STORAGE_BIT);
        ASSUME(glGetError() == GL_NO_ERROR);
    }
};

#endif // OPENGL_BUFFER_OBJECT_INCLUDE
